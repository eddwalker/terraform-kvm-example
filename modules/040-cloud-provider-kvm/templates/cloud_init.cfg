#cloud-config
# Manual: https://cloudinit.readthedocs.io/en/latest/reference/examples.html
# Debug: ssh to builded vm and in /var/log/cloud-init-output.log find string WARNING
#        for cloud-init warnings command line to find out generated txt filename will be provided,
#        you may edit this file as you want and check with next command as root (filename may vary):
#        cloud-init schema --config-file /var/lib/cloud/instances/nocloud/cloud-config.txt
users:
  - name: ${VM_USER_NAME}
    # echo pass | mkpasswd --method=SHA-512 --rounds=4096
    passwd: $6$TwsTD3hjfET4FwL3$SXH6w7hAveZzSwcz4AVVM0KL.sM60M8LetQCaZN6n4QMGf/0eKEDTRDl3o0OuKMOISFH5bp8UiIIMbmitR34Z1
    lock_passwd: false
    sudo: ALL=(ALL) NOPASSWD:ALL
    # primary_group:
    groups: users, admin
    homedir: /home/${VM_USER_NAME}
    shell: /bin/bash
    #expiredate: '2999-01-01'
    ssh_authorized_keys:
%{ for pubkey in VM_USER_PUBKEYS ~}
      - "${pubkey}"
%{ endfor ~}

ssh_pwauth: True
disable_root: false

groups:
  - docker

# Add default auto created user to docker group
system_info:
  default_user:
    groups: [docker]

#write_files:
 # hide annoing banners after connect to sshd
 #- path: /home/${VM_USER_NAME}/.sudo_as_admin_successful
 #  permissions: 0o644
 #  owner: ${VM_USER_NAME}
 #  content: |
 #    this file was created to avoid banners

 # script hardening sshd (see below), remove unused sshd Hostkeys
 # and fix sshd listen address to avoid collisions with containers/VMs
 #- path: /usr/local/bin/ssh_dh_low_remove.sh
 #  permissions: 0o700
 #  content: |
 #    #!/usr/bin/env bash
 #    cfg=/etc/ssh/sshd_config
 #    mod=/etc/ssh/moduli
 #    addr=$(hostname -I | grep -oP "[^ ]+" | tr -d "\n")
 #    hostkeys="$(grep -i -oP "^HostKey\s*\K.*" $cfg)"
 #    awk '$5 >= 3071' $mod > $mod.tmp && mv $mod.tmp $mod
 #    if ! grep -qs ^ListenAddress $cfg
 #    then
 #        echo "ListenAddress 0.0.0.0:22" >> $cfg
 #    fi
 #    sed -i"" "s/0.0.0.0/$addr/" $cfg
 #    for i in /etc/ssh/ssh_host*
 #    do
 #        if [[ $i =~ \.pub$ ]]
 #        then
 #            continue
 #        fi
 #        if echo "$i" | grep -qs "$hostkeys"
 #        then
 #            echo "keep $i"
 #        else
 #            echo "del  $i"
 #            rm -f $i $i.pub
 #        fi
 #    done
 #    systemctl restart sshd

   # Let iptables see bridged traffic
   # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
 #- path: /etc/modules-load.d/br_netfilter.conf
 #  permissions: 0o664
 #  content: |
 #    br_netfilter

 #  # Let iptables see bridged traffic
 #  # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
 #- path: /etc/sysctl.d/95-br_netfilter.conf
 #  permissions: 0o664
 #  content: |
 #    net.bridge.bridge-nf-call-ip6tables = 1
 #    net.bridge.bridge-nf-call-iptables = 1


 #  # Disabling swap is recommended practice for k8s nodes
 #- path: /etc/sysctl.d/94-vm_swappiness.conf
 #  permissions: 0o664
 #  content: |
 #    vm.swappiness = 0

 #  # hardening sshd config
 #- path: /etc/ssh/sshd_config
 #  permissions: 0o600
 #  content: |
 #    Protocol 2
 #    ListenAddress 0.0.0.0:22
 #    # Keep only strongest server key
 #    HostKey /etc/ssh/ssh_host_ed25519_key
 #    UseDNS no
 #    UsePAM no
 #    LoginGraceTime 20
 #    PermitRootLogin no
 #    AuthenticationMethods publickey
 #    AllowTcpForwarding no
 #    X11Forwarding no
 #    X11DisplayOffset 10
 #    PrintMotd no
 #    PrintLastLog yes
 #    # Allow only this users to login
 #    AllowUsers ${VM_USER_NAME}
 #    # https://weakdh.org/
 #    # https://infosec.mozilla.org/guidelines/openssh
 #    # All Diffie-Hellman moduli in use should be at least 3072-bit-long (they are used for diffie-hellman-group-exchange-sha256)
 #    # as per our Key management Guidelines recommendations.
 #    # awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.tmp && mv /etc/ssh/moduli.tmp /etc/ssh/moduli
 #    # Specifies the available KEX (Key Exchange) algorithms.
 #    KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256
 #    # Specifies the ciphers allowed
 #    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
 #    #Specifies the available MAC (message authentication code) algorithms
 #    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
 #    # LogLevel VERBOSE logs user's key fingerprint on login. Needed to have a clear audit track of which key was using to log in.
 #    LogLevel VERBOSE
 #    # Log sftp level file access (read/write/etc.) that would not be easily logged otherwise.
 #    Subsystem sftp  /usr/lib/ssh/sftp-server -f AUTHPRIV -l INFO

preserve_hostname: false

hostname: "${VM_HOST_NAME}"

# Note: if packages are specified, then package_update will be set to true
package_update: ${VM_APT_UPDATE}
package_upgrade: ${VM_APT_UPGRADE}
#packages:
#    - qemu-guest-agent
#    - bash-completion
#    - apt-transport-https
#    - ca-certificates
#    - curl
#    - gnupg
#    - lsb_release
#    - gnupg-agent
#    - software-properties-common
#    - zsh

growpart:
  mode: auto
  devices: ['/']

runcmd:
  - [ sh, -c, 'printf "%s %s %s\n" "$(echo $(hostname -I) | tr -d "\n")" "${VM_HOST_NAME}" "${VM_HOST_FULLNAME}" >> /etc/hosts' ]
  - [ sh, -c, 'chown -R ${VM_USER_NAME} /home/${VM_USER_NAME} ' ]
#  - [ sh, -c, 'systemctl disable --now unattended-upgrades.service lvm2-lvmetad lvm2-lvmetad.socket lvm2-lvmpolld.socket accounts-daemon polkit' ]
#  - [ sh, -c, 'apt-get purge --yes "*lxc*" snapd unattended-upgrades "lvm2*" accountsservice "libpolkit*"' ]
#  - [ sh, -c, 'apt-get autoremove --yes' ]
#  - [ sh, -c, 'rm -Rf /var/log/unattended-upgrades' ]
#  - [ sh, -c, 'modprobe br_netfilter' ]
#  - [ sh, -c, 'sysctl -f /etc/sysctl.d/br_netfilter.conf' ]
#  - [ sh, -c, '/usr/local/bin/ssh_dh_low_remove.sh' ]
#  - [ sh, -c, 'awk \'$5 >= 3071\' /etc/ssh/moduli > /etc/ssh/moduli.tmp && mv /etc/ssh/moduli.tmp /etc/ssh/moduli' ]
#  - [ sh, -c, 'cloud-init status --wait' ] # cannot detect done while cloud init runs
#  - [ sh, -c, 'printf "${VM_HOST_NAME}" > /etc/hostname' ]
#  - [ sh, -c, 'hostnamectl set-hostname "${VM_HOST_NAME}"' ]
 # - [ sh, -c, 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -' ]
 # - [ sh, -c, 'sudo apt-key fingerprint 0EBFCD88']
 # - [ sh, -c, 'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"' ]
 # - [ sh, -c, 'sudo apt update' ]
 # - [ sh, -c, 'sudo apt install -y docker-ce docker-ce-cli containerd.io' ]
 # - [ sh, -c, 'printf "\nalias dk=\"sudo docker\"\n"            >> /home/${VM_USER_NAME}/.bashrc' ]
 # - [ sh, -c, 'printf "\nalias dkc=\"sudo docker container\"\n" >> /home/${VM_USER_NAME}/.bashrc' ]
 # - [ sh, -c, 'printf "\nalias dki=\"sudo docker image\"\n"     >> /home/${VM_USER_NAME}/.bashrc' ]
 # - [ sh, -c, 'printf "\nalias dks=\"sudo docker service\"\n"   >> /home/${VM_USER_NAME}/.bashrc' ]
 # - [ sh, -c, 'printf "\nalias dkn=\"sudo docker node\"\n"      >> /home/${VM_USER_NAME}/.bashrc' ]
