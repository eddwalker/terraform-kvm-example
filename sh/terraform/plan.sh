#!/usr/bin/env bash
# Please read important notes:
# 1. Terraform plan should go through the entire infrastructure and show which changes is planned
# 2. It can be reached by create script resolving all modules depended from changed one
# 3. Plan must be generated by request since plan may take alot of time so its not an option generate plan on every push
# 4. Request may be special trigger word in commit description
# 5. To speed up plan, 'terraform plan -refresh=false' option may be used but it skip checking remote objects,
#    as result plan _may_ be inconsistent, to ensure everything is OK required time-to-time run 'terraform refresh'
#    to deliver remote changes to local tfstate.
# 6. Take a note what plan may affect remote infrastructure with a malicious code from yours modules

set -e

params="$@"

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $SCRIPT_DIR/variables.inc
PLUGIN_DIR=$PLUGIN_DIR/.terraform/providers

svg=$TEMP/graph.svg


printf "Workspace: %s\n" "$(terraform workspace show)"


if [[ -n "$params" ]]
then
    sudo terraform plan "$params"
    exit 0
else
    sudo terraform plan
fi

terraform graph | dot -Tsvg > $svg

desktop_filename="$(
  xdg-settings get default-web-browser
)"

desktop_location="$(
  find \
    $HOME/.local/share/applications/ \
    /usr/local/share/applications/ \
    /usr/share/applications/ \
    -name $desktop_filename
)"

cmd="$(grep -h -m1 -oP '^Exec\s*=\K[^ ]+' $desktop_location)"

$cmd $svg 2>&1 | grep -ivE '(to the bus|smashing|opening)' &

